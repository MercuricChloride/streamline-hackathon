const BLUR = 0x000000000000Ad05Ccc4F10045630fb830B95127;
const BLEND = 0x29469395eaf6f95920e59f858042f0e28d98a20b;

mfn map_trades(BLOCK) {
    let trades = blur::OrdersMatched(BLOCK, [global::BLUR]);
    if trades.len() != 0 {
        return #{
        trades: trades
        };
    }
}

mfn map_events(BLOCK) {
    let loans = blend::LoanOfferTaken(BLOCK, [global::BLEND]);
    if loans.len() != 0 {
        return #{
            loans: loans
        }
    }
}

sfn buy_counts(map_)

sfn loan_volumes(map_events, s:add) {
    let loans = map_events?.loans ?? [];

    for loan in loans {
        let collection = loan.collection;
        let value = loan.loan_amount;
        s.add(collection, value);
    }
}

mfn map_store_lends(loan_volumes:deltas) {
    let volume_deltas = loan_volumes.deltas ?? [];

    if volume_deltas.len() != 0 {
        return #{
            volume_changes: volume_deltas
        }
    }
}